apply plugin: 'com.android.application'
apply plugin: 'maven'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.rsupport.rssigner'
apply plugin: 'io.fabric'
apply plugin: "kotlin-allopen"

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    useLibrary 'org.apache.http.legacy'

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/AL2.1'
        exclude 'META-INF/LGPL2.1'
    }

    defaultConfig {
        applicationId "com.rsupport.mobile.agent"
        targetSdkVersion 29
        versionCode "$VERSION_CODE".toInteger()
        versionName VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "4096M"

    }

    signingConfigs {
        engineer {
            storeFile file("platform.keystore")
            storePassword "android"
            keyAlias "platformkey"
            keyPassword "android"
        }

        testkey {
            storeFile file("keystore/testkey.keystore")
            storePassword "rspp0702"
            keyAlias "rsupknox"
            keyPassword "rssp4524"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles 'proguard-rules.pro'
            proguardFiles 'proguard-rules-knox.pro'
            proguardFiles 'proguard-rules-coroutines.pro'
            zipAlignEnabled true
        }

        staging {
            minifyEnabled false
            zipAlignEnabled true
        }

        engineer {
            minifyEnabled false
            zipAlignEnabled true
            signingConfig signingConfigs.engineer
        }

        debug {
            minifyEnabled false
            signingConfig signingConfigs.testkey
        }
    }

    flavorDimensions "tier"
    productFlavors {
        asp {
            versionCode VERSION_CODE.toInteger()
            minSdkVersion 19
            dimension "tier"
        }
        cn {
            versionCode VERSION_CODE.toInteger()
            minSdkVersion 19
            applicationId "com.rsupport.mobile.agent.cn"
            dimension "tier"
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

    repositories {
        maven {
            url "http://build.rsupport.com:8081/content/repositories/releases"
        }
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}
configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':engine_module')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.rsupport.android.mobizen.engine:installer:4.1.2.1'
    implementation 'com.rsupport.android:rscommon-android:0.1.23'
    implementation 'com.rsupport.android.remotecall:rlog:1.0.1'
    implementation 'com.rsupport.android.remotecall:rsnetcl:1.4.1'
    implementation 'com.rsupport.android.remotecall:support-v11-knox:2.0.6'
    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5.1'
    implementation 'com.google.firebase:firebase-messaging:20.2.4'

    implementation 'com.google.firebase:firebase-core:17.5.0'
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'androidx.core:core-ktx:1.3.1'
    implementation "androidx.activity:activity-ktx:1.1.0"
    implementation 'androidx.fragment:fragment-ktx:1.2.5'

    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0'

}

// testing
dependencies {
    testImplementation 'junit:junit:4.13'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'

    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
}


// Coroutines
dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.7'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
}


// live data
dependencies {
    def lifecycleVersion = "2.2.0"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:${lifecycleVersion}"
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycleVersion}"
    // use -ktx for Kotlin
    // alternatively - just LiveData
//    implementation "androidx.lifecycle:lifecycle-livedata:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${lifecycleVersion}"

    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "androidx.lifecycle:lifecycle-runtime:${lifecycleVersion}"

//    kapt 'androidx.lifecycle:lifecycle-compiler:2.0.0' // use kapt for Kotlin
    // alternately - if using Java8, use the following instead of compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:${lifecycleVersion}"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:${lifecycleVersion}"

    // optional - Test helpers for LiveData
//    testImplementation "androidx.arch.core:core-testing:${lifecycleVersion}"
    testImplementation "androidx.lifecycle:lifecycle-livedata-ktx:${lifecycleVersion}"
}

// ktx
dependencies {
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
}


// Mockito
dependencies {
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.mockito:mockito-inline:3.3.3'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'

    // Optional -- Robolectric environment
    testImplementation 'androidx.test:core:1.2.0'

    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0' //Mockito-Kotlin
    testImplementation 'org.mockito:mockito-inline:3.3.3'

    androidTestImplementation 'org.mockito:mockito-android:3.3.3'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
}

//Koin for Kotlin
dependencies {
    // Koin for Kotlin
    implementation "org.koin:koin-core:$koin_version"
    // Koin extended & experimental features
    implementation "org.koin:koin-core-ext:$koin_version"
    // Koin for Unit tests
    testImplementation "org.koin:koin-test:$koin_version"
    // Koin for Java developers
    implementation "org.koin:koin-java:$koin_version"


    // Koin for Android
    implementation "org.koin:koin-android:$koin_version"
    // Koin Android Scope features
    implementation "org.koin:koin-android-scope:$koin_version"
    // Koin Android ViewModel features
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    // Koin Android Experimental features
    implementation "org.koin:koin-android-ext:$koin_version"

    // Koin AndroidX Scope features
    implementation "org.koin:koin-androidx-scope:$koin_version"
    // Koin AndroidX ViewModel features
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    // Koin AndroidX Experimental features
    implementation "org.koin:koin-androidx-ext:$koin_version"
}

// Room
dependencies {
    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5" // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.2.5"

    // optional - RxJava support for Room
//    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
//    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:2.2.5"
}

allOpen {
    annotation("com.rsupport.mobile.agent.utils.OpenClass")
}

def today = (new Date()).format("yyyyMMdd")

rssigner {
    server "http://mbuild.rsupport.com/apksigner/"

    signConfigs {
        release {
            unsignedPath "${project.projectDir}/build/outputs/apk/asp/release/app-asp-release-unsigned.apk"
            outputName "rview-agent-${VERSION_NAME}-b${VERSION_CODE}-${today}-release.apk"
            signType "RV_AGENT"
        }

        staging {
            unsignedPath "${project.projectDir}/build/outputs/apk/asp/staging/app-asp-staging-unsigned.apk"
            outputName "rview-agent-${VERSION_NAME}-b${VERSION_CODE}-${today}-staging.apk"
            signType "RV_AGENT"
        }

        releaseCN {
            unsignedPath "${project.projectDir}/build/outputs/apk/cn/release/app-cn-release-unsigned.apk"
            outputName "rview-agent-cn-${VERSION_NAME}-b${VERSION_CODE}-${today}-release.apk"
            signType "RV_AGENT"
        }

        stagingCN {
            unsignedPath "${project.projectDir}/build/outputs/apk/cn/staging/app-cn-staging-unsigned.apk"
            outputName "rview-agent-cn-${VERSION_NAME}-b${VERSION_CODE}-${today}-staging.apk"
            signType "RV_AGENT"
        }
    }
}


task buildStaging(group: 'android') {
    dependsOn('clean')
    tasks.create("assembleStagingTask").dependsOn("assembleStaging")
    dependsOn('assembleStagingTask')
    tasks.findByName('assembleStagingTask').mustRunAfter('clean')
}

task buildRelease(group: 'android') {
    dependsOn('clean')
    tasks.create("assembleReleaseTask").dependsOn("assembleRelease")
    dependsOn('assembleReleaseTask')
    tasks.findByName('assembleReleaseTask').mustRunAfter('clean')
}


// ASP
task updateStringResource(group: 'android:asp') {
    dependsOn(':stringResource:convertAndroidResource')
    dependsOn(':stringResource:downloadExcel')
    tasks.findByPath(':stringResource:convertAndroidResource').mustRunAfter ':stringResource:downloadExcel'
}

task installRelease(group: "android:asp", type: Exec) {
    def apkPath = "${project.projectDir}/build/outputs/apk/asp/release/rview-agent-${VERSION_NAME}-b${VERSION_CODE}-${today}-release.apk"
    commandLine 'adb', 'install', '-r', "${apkPath}"
}

task installStaging(group: "android:asp", type: Exec) {
    def apkPath = "${project.projectDir}/build/outputs/apk/asp/staging/rview-agent-${VERSION_NAME}-b${VERSION_CODE}-${today}-staging.apk"
    commandLine 'adb', 'install', '-r', "${apkPath}"
}

task uninstall(group: "android:asp", type: Exec) {
    commandLine 'adb', 'uninstall', 'com.rsupport.mobile.agent'
}

task buildAndInstallASPStaging(group: "android:asp") {
    dependsOn('buildStaging')
    dependsOn('rssignStaging')
    dependsOn('installStaging')
    tasks.findByName('rssignStaging').mustRunAfter('buildStaging')
    tasks.findByName('installStaging').mustRunAfter('rssignStaging')
}


task buildAndInstallASPRelease(group: "android:asp") {
    dependsOn('buildRelease')
    dependsOn('rssignRelease')
    dependsOn('installRelease')
    tasks.findByName('rssignRelease').mustRunAfter('buildRelease')
    tasks.findByName('installRelease').mustRunAfter('rssignRelease')
}


// CN
task updateStringResourceCN(group: 'android:cn') {
    dependsOn(':stringResource:convertAndroidResourceCN')
    dependsOn(':stringResource:downloadExcel')
    tasks.findByPath(':stringResource:convertAndroidResourceCN').mustRunAfter ':stringResource:downloadExcel'
}


task installReleaseCN(group: "android:cn", type: Exec) {
    def apkPath = "${project.projectDir}/build/outputs/apk/cn/release/rview-agent-cn-${VERSION_NAME}-b${VERSION_CODE}-${today}-release.apk"
    commandLine 'adb', 'install', '-r', "${apkPath}"
}

task installStagingCN(group: "android:cn", type: Exec) {
    def apkPath = "${project.projectDir}/build/outputs/apk/cn/staging/rview-agent-cn-${VERSION_NAME}-b${VERSION_CODE}-${today}-staging.apk"
    commandLine 'adb', 'install', '-r', "${apkPath}"
}

task uninstallCN(group: "android:cn", type: Exec) {
    commandLine 'adb', 'uninstall', 'com.rsupport.mobile.agent.cn'
}

task buildAndInstallCNStaging(group: "android:cn") {
    dependsOn('buildStaging')
    dependsOn('rssignStagingCN')
    dependsOn('installStagingCN')
    tasks.findByName('rssignStagingCN').mustRunAfter('buildStaging')
    tasks.findByName('installStagingCN').mustRunAfter('rssignStagingCN')
}


task buildAndInstallCNPRelease(group: "android:cn") {
    dependsOn('buildRelease')
    dependsOn('rssignReleaseCN')
    dependsOn('installReleaseCN')
    tasks.findByName('rssignReleaseCN').mustRunAfter('buildRelease')
    tasks.findByName('installReleaseCN').mustRunAfter('rssignReleaseCN')
}








